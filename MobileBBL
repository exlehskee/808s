-- // Celaris Mobile BBL

local allowedPlaces = {
    [14386691987] = true,
    [14259168147] = true
}

if not allowedPlaces[game.PlaceId] then
    game:GetService("Players").LocalPlayer:Kick("Wrong Game Bitch Nigga Check Supported Games")
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/exlehskee/Celaris/refs/heads/main/sdadas"))()
local Main = Library:Create("Celaris", "Basketball Legends")

local player = game.Players.LocalPlayer
local bar = player.PlayerGui:WaitForChild("Visual"):WaitForChild("Shooting"):WaitForChild("Bar")
local shootingUI = player.PlayerGui:WaitForChild("Visual"):WaitForChild("Shooting")

local autoGreenEnabled = false
local autoGreenPercentage = 10

local ShootingTab = Main:CreateSection("Shooting")
local PlayerTab = Main:CreateSection("Player")
local SettingsTab = Main:CreateSection("Settings")

-- // Shooting Tab
ShootingTab:CreateLabel("Auto Green")
ShootingTab:CreateToggle("Enabled", function(value)
    autoGreenEnabled = value
end)

ShootingTab:CreateTextBox("Auto Green Percentage", "(1 - 10)", function(v)
    local num = tonumber(v)

    if num and num >= 1 and num <= 10 then
        autoGreenPercentage = num
        -- Success notification
        pcall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Auto Green Percentage Updated",
                Text = "New Percentage: " .. num,
                Duration = 3
            })
        end)
    else
        -- Error notification
        pcall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Invalid Input",
                Text = "Enter a number between 1 and 10",
                Duration = 3
            })
        end)
    end
end)


-- // Players Ta
-- // Source

-- // Auto Green Logic
task.spawn(function()
    while true do
        task.wait()

        if shootingUI.Visible and autoGreenEnabled then
            local newY = 0.90 + ((autoGreenPercentage - 1) * 0.01)
            bar.Size = UDim2.new(1, 0, newY, 0)
        end
    end
end)

-- // UI

local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

-- Function to apply the drag system
local function applyDragSystem()
	wait(1) -- Delay so everything is loaded

	for _, gui in pairs(CoreGui:GetChildren()) do
		if gui:IsA("ScreenGui") and gui.Name == "name" then
			local MainLib = gui:FindFirstChild("MainLib")
			if MainLib then
				local dragging = false
				local dragStart, startPos

				local function update(input)
					local delta = input.Position - dragStart
					MainLib.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
				end

				MainLib.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						dragging = true
						dragStart = input.Position
						startPos = MainLib.Position

						input.Changed:Connect(function()
							if input.UserInputState == Enum.UserInputState.End then
								dragging = false
							end
						end)
					end
				end)

				UserInputService.InputChanged:Connect(function(input)
					if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						update(input)
					end
				end)
			end
		end
	end
end

applyDragSystem()

SettingsTab:CreateLabel("Settings")

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Set your main UI name here:
local mainUi = CoreGui:FindFirstChild("name")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MobileToggleUI"
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

-- Create TextButton
local button = Instance.new("TextButton")
button.Name = "ToggleUIButton"
button.Size = UDim2.new(0.12, 0, 0.05, 0)
button.Position = UDim2.new(0.44, 0, 0.02, 0)
button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.GothamMedium -- closest to Montserrat in Roblox
button.TextScaled = true
button.Text = "Open"
button.Parent = screenGui

-- Make it draggable
button.Active = true
button.Draggable = true

-- Add rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 6)
corner.Parent = button

-- Update button text depending on UI visibility
local function updateButtonText()
	if mainUi and mainUi.Enabled then
		button.Text = "Close"
	else
		button.Text = "Open"
	end
end

-- Button logic
button.MouseButton1Click:Connect(function()
	if mainUi then
		mainUi.Enabled = not mainUi.Enabled
		updateButtonText()
	end
end)

-- Constantly check state
task.spawn(function()
	while true do
		updateButtonText()
		task.wait(0.5)
	end
end)
